     1                                  ; MEGHA BOOT LOADER
     2                                  ; Version: 0.32 (110819)
     3                                  ;
     4                                  ; Contains FAT12 driver, that reads a loader file from the disk to a buffer and
     5                                  ; and jumps to the loader code.
     6                                  ;
     7                                  ; -------------------------
     8                                  ; Changes in version 0.02 (4th July 2019)
     9                                  ; -------------------------
    10                                  ; * Removed the 'Welcome' message. Directly boots into the splashscreen now.
    11                                  ; * Removed 'filereqsize', 'filesize' (these were not really needed, we want to
    12                                  ;   load the whole file, so stating required size was useless).
    13                                  ; * Changed 'osegoffset' from EQU to RESW.
    14                                  ; * Resulted in reducing the file size from 503 bytes to 430 bytes in v0.02.
    15                                  ;
    16                                  ; -------------------------
    17                                  ; Changes in version 0.03 (3rd August 2019)
    18                                  ; -------------------------
    19                                  ; * Objective of file is now to load a 'loader' file and jump to it.
    20                                  ; * Loads a loader program into memory and jumps to it.
    21                                  ;
    22                                  ; * Sets up stack explicitly to be just before the bootloader.
    23                                  ;       Top of the stack is now 0x6C0:FFF
    24                                  ;       Stack is 4KiB in size
    25                                  ;
    26                                  ; * loadFlie and printString functions can now be accessed using INT 
    27                                  ;       loadFile    --> INT 30
    28                                  ;       printString --> INT 31
    29                                  ;   These two functions can be accessed from any segment and can be used by the
    30                                  ;   'loader' program to load rest of the OS and show some message on screen.
    31                                  ;
    32                                  ; * To save storage, error messages are now
    33                                  ;   |-----------------------|---------------------|
    34                                  ;   |       ERROR           |     MESSAGE         |
    35                                  ;   |-----------------------|---------------------|
    36                                  ;   |Floppy cannot be reset |       FL            |
    37                                  ;   |-----------------------|---------------------|
    38                                  ;   |Loader fie not found   |       LD            |
    39                                  ;   |-----------------------|---------------------|
    40                                  ; 
    41                                  ; * INT 30 is now used in the bootloader as well.
    42                                  ; * INT 31 is now used to display text in the bootloader.
    43                                  ; * INT 30 (loadFile) now preserves DS segment.
    44                                  ; * Bootloader sets just the DS register before jump to the loader. Previously
    45                                  ;   it set ES, FS, GS as well.
    46                                  ; * BootLoader file size is now 509 bytes.
    47                                  ;
    48                                  ; -------------------------
    49                                  ; Changes in version 0.31 (3rd August 2019)
    50                                  ; -------------------------
    51                                  ; * loadFile now do not take the segment number (CX register was used for this)
    52                                  ;   of the filename. It is now assumed to be same as DS of the callee.
    53                                  ; * Bootloader file size is 503 bytes.
    54                                  ; * Data section that is used by loadFile function was moved to loadFile.s
    55                                  ;
    56                                  ; -------------------------
    57                                  ; Changes in version 0.32 (11th August 2019)
    58                                  ; -------------------------
    59                                  ; * loadFile now returns the loaded file size in AX
    60                                  ;   If it failed to load the file, AX is 0
    61                                  ; * The 2nd Stage loader is loaded at location 0x800:0x100
    62                                  ;
    63                                  	org 0x7C00
    64                                  ; ******************************************************
    65                                  ; BIOS PARAMETER BLOCK
    66                                  ; ******************************************************
    67                                  
    68 00000000 E93B00                  	jmp near boot_main
    69                                  
    70 00000003 41524A4F424F4F54        	OEMLabel		db "ARJOBOOT"	; Disk label
    71 0000000B 0002                    	BytesPerSector		dw 512		; Bytes per sector
    72 0000000D 01                      	SectorsPerCluster	db 1		; Sectors per cluster
    73 0000000E 0100                    	ReservedSector		dw 1		; Reserved sectors for boot record
    74 00000010 02                      	NumberOfFats		db 2		; Number of copies of the FAT
    75 00000011 E000                    	RootEntries		dw 224		; Number of entries in root dir
    76                                  						; (224 * 32 = 7168 = 14 sectors to read)
    77 00000013 400B                    	LogicalSectors		dw 2880		; Number of logical sectors
    78 00000015 F0                      	MediumByte		db 0F0h		; Medium descriptor byte
    79 00000016 0900                    	SectorsPerFat		dw 9		; Sectors per FAT
    80 00000018 1200                    	SectorsPerTrack		dw 18		; Sectors per track (36/cylinder)
    81 0000001A 0200                    	HeadCount		dw 2		; Number of sides/heads
    82 0000001C 00000000                	HiddenSectors		dd 0		; Number of hidden sectors
    83 00000020 00000000                	LargeSectors		dd 0		; Number of LBA sectors
    84 00000024 0000                    	DriveNo			dw 0		; Drive No: 0
    85 00000026 29                      	Signature		db 41		; Drive signature: 41 for floppy
    86 00000027 00000000                	VolumeID		dd 00000000h	; Volume ID: any number
    87 0000002B 41524A4F424F532020-     	VolumeLabel		db "ARJOBOS    "; Volume Label: any 11 chars
    87 00000034 2020               
    88 00000036 4641543132202020        	FileSystem		db "FAT12   "	; File system type: don't change!
    89                                  
    90                                  ; ******************************************************
    91                                  ; MACRO BLOCK
    92                                  ; ******************************************************
    93                                  
    94                                  %macro printString 1
    95                                  	push si
    96                                  	mov si, %1
    97                                  	int 0x31
    98                                  	pop si
    99                                  %endmacro
   100                                  
   101                                  ; ******************************************************
   102                                  ; MAIN CODE BLOCK
   103                                  ; ******************************************************
   104                                  boot_main:	
   105                                  	; Setup the Stack
   106                                  	; The Stack is 4k in size and starts at location 0x7BFF or 6C0:FFF
   107                                  	; Each of the segment starts at 16 bit boundary an 4k space must be
   108                                  	; allocated from the start of that segment. Therefore
   109                                  	; 	segment * 0x10 + 0xFFF = 0x7BFF => segment = 0x6C0
   110                                  	;
   111 0000003E FA                      	cli		; disable interrupts
   112 0000003F B8C006                  	mov ax, 0x6C0
   113 00000042 8ED0                    	mov ss, ax
   114 00000044 BCFF0F                  	mov sp, 0xFFF
   115 00000047 FB                      	sti		; enable interrupts
   116                                  
   117                                  	; reset the floppy drive
   118 00000048 B400                    	mov ah, 0
   119 0000004A B200                    	mov dl, 0
   120 0000004C CD13                    	int 0x13
   121 0000004E 7236                    	jc failed_drive_error 	; drive error
   122                                  
   123                                  	; install loadFile to IVT
   124 00000050 31C0                    	xor ax, ax
   125 00000052 8EE8                    	mov gs, ax
   126 00000054 65C706C000[9800]        	mov [gs:0x30*4], word loadFile
   127 0000005B 658C0EC200              	mov [gs:0x30*4+2], cs
   128                                  
   129                                  	; install printstr to IVT
   130 00000060 65C706C400[C701]        	mov [gs:0x31*4], word printstr
   131 00000067 658C0EC600              	mov [gs:0x31*4+2], cs
   132                                  
   133                                  	; Read the directory and search for file
   134                                  
   135 0000006C B80008                  	mov ax, 0x800
   136 0000006F BB0001                  	mov bx, 0x100
   137 00000072 BA[D901]                	mov dx, bootfile
   138                                  
   139 00000075 CD30                    	int 0x30
   140 00000077 83F800                  	cmp ax, 0			; Check if read was successful
   141 0000007A 7413                    	je failed_file_not_found	; Show error message if read failed.
   142                                  
   143                                  	; -------------------- JUMP TO LOADER
   144                                  	; Read was a success, we prepare the segment registers and jump.
   145 0000007C B80008                  	mov ax, LOADER_SEG
   146 0000007F 8ED8                    	mov ds, ax
   147 00000081 EA00010008              	jmp LOADER_SEG:LOADER_OFF
   148                                  	;--------------------- 
   149                                  
   150                                  failed_drive_error:
   151                                  	printString drivefailedstr
   151 00000086 56                  <1>  push si
   151 00000087 BE[D301]            <1>  mov si, %1
   151 0000008A CD31                <1>  int 0x31
   151 0000008C 5E                  <1>  pop si
   152 0000008D EB07                    	jmp exit
   153                                  failed_file_not_found:
   154                                  	printString filenotfoundstr
   154 0000008F 56                  <1>  push si
   154 00000090 BE[D601]            <1>  mov si, %1
   154 00000093 CD31                <1>  int 0x31
   154 00000095 5E                  <1>  pop si
   155                                  exit:	
   156 00000096 EBFE                    	jmp $
   157                                  ; ======================================================================
   158                                  ; ======================================================================
   159                                  
   160                                  %include "../include/mos.inc"
     1                              <1> ; Main include file for kernel, driver and application developers.
     2                              <1> ; It includes the function numbers for all interrupts in the MOS kernel.
     3                              <1> ; It also includes some version information of various files in this release of
     4                              <1> ; the MOS Operating System.
     5                              <1> 
     6                              <1> %ifndef __MOS_INC__
     7                              <1> 	%define __MOS_INC__
     8                              <1> 
     9                              <1> 	; Version informations
    10                              <1> 	%define 	MOS_VER 		"0.1  (110819)"
    11                              <1> 	%define 	BOOTLOADER_VER 	"0.32 (110819)"
    12                              <1> 	%define 	LOADER_VER		"0.21  (130819)"
    13                              <1> 	%define		DEBUG_DRV_VER	"0.1  (100819)"
    14                              <1> 	%define		KERNEL_VER		"0.1 (180819)"
    15                              <1> 
    16                              <1> 	; Settings: -
    17                              <1> 		; Colors and look and feel
    18                              <1> 			DEFAULT_TEXT_COLOR:		EQU	0xF		; WHITE
    19                              <1> 
    20                              <1> 		; String Comparison
    21                              <1> 		MATCH_CASE_INSENSITIVE: 	EQU 0
    22                              <1> 		MATCH_CASE_SENSITIVE: 		EQU 1
    23                              <1> 		STRING_MATCH: 				EQU MATCH_CASE_INSENSITIVE
    24                              <1> 
    25                              <1> 	; Segment and fixed lengths of different parts of MOS
    26                              <1> 	MDA_SEG:		EQU 	0x800
    27                              <1> 	MDA_OFF:		EQU		0x0
    28                              <1> 	MDA_LEN:		EQU		1024
    29                              <1> 
    30                              <1> 	LOADER_SEG		EQU		0x800
    31                              <1> 	LOADER_OFF:		EQU		0x100
    32                              <1> 	LOADER_LEN:		EQU		768
    33                              <1> 
    34                              <1> 	MODULE0_SEG:	EQU		0x840
    35                              <1> 	MODULE0_OFF:	EQU		0x64
    36                              <1> 	
    37                              <1> 	; Routines in guru.mod (accessed via INT 0x41)
    38                              <1> 	GURU_PRINTHEX			EQU 0
    39                              <1> 	GURU_PRINTSTRING		EQU 1
    40                              <1> 	GURU_CLEARSCREEN		EQU 2
    41                              <1> 	GURU_HEXDUMP			EQU 3
    42                              <1> 
    43                              <1> 	; Routines in despatcher.mod (accessed via INT 0x40)
    44                              <1> 	DS_ADD_ROUTINE			EQU 0x30
    45                              <1> 
    46                              <1> 	; Routines in vfs.mod (accessed via INT 0x40)
    47                              <1> 	VFS_OPEN				EQU 0xA
    48                              <1> 	VFS_CLOSE				EQU 0xB
    49                              <1> 	VFS_MOUNT				EQU 0xC
    50                              <1> 	VFS_UMOUNT				EQU 0xD
    51                              <1> 	VFS_REGISTER_FS			EQU 0xE
    52                              <1> %endif
   161                                  %include "loadFile.s"
     1                              <1> ; ------------------------------------------- MACRO BLOCK BEGINS
     2                              <1> ; Reads a sector into a buffer
     3                              <1> ; Input:
     4                              <1> ;	Argument 1 - sector number
     5                              <1> ;	Argument 2 - buffer location
     6                              <1> ; Output:
     7                              <1> ;	The flags from INT 13 are preserved.
     8                              <1> %macro readSector 2
     9                              <1> 	pusha		; I used push and pop a just to same some memory
    10                              <1> 
    11                              <1> 	mov ax, %1
    12                              <1> 	call csh	; seetup the registers properly for INT 13H
    13                              <1> 
    14                              <1> 	mov ah, 02	; sector read system call
    15                              <1> 	mov al, 01	; read one sector
    16                              <1> 	mov bx, %2
    17                              <1> 	int 0x13
    18                              <1> 
    19                              <1> 	popa
    20                              <1> %endmacro
    21                              <1> ; ------------------------------------------- MACRO BLOCK ENDS
    22                              <1> 
    23                              <1> ; LOADS WHOLE FILE FROM THE FLOPPY DISK TO MEMORY.
    24                              <1> ; NOTE: CANNOT READ FILES THAT ARE LARGER THAN 64KB.
    25                              <1> ; Input: AX - Memory segment of the destination address
    26                              <1> ;	 BX - Memory offset in the segment
    27                              <1> ;	 DX - Memory offset with the filename
    28                              <1> ; Output: AX - 0 file could not be read.
    29                              <1> ;	       Or returns the file size if read was successful.
    30                              <1> 
    31                              <1> loadFile:
    32 00000098 1E                  <1> 	push ds
    33 00000099 60                  <1> 	pusha
    34                              <1> 	
    35 0000009A 31C9                <1> 	xor cx, cx
    36                              <1> 	; Copy filename from the location pointed to by DS:DX to the local
    37                              <1> 	; memory segment and storage.
    38 0000009C 89D6                <1> 	mov si, dx			; DS:SI
    39 0000009E 8EC1                <1> 	mov es, cx
    40 000000A0 BF[9601]            <1> 	mov di, bootfilename		; ES:DI
    41 000000A3 B90B00              <1> 	mov cx, 11
    42 000000A6 F3A4                <1> 	rep movsb
    43                              <1> 
    44                              <1> 	; Change the DS register to 0. Needed to address local memory.
    45 000000A8 8ED9                <1> 	mov ds, cx
    46                              <1> 
    47                              <1> 	; save the output memory location to local memory
    48 000000AA A3[A701]            <1> 	mov [osegment],ax
    49 000000AD 891E[A501]          <1> 	mov [osegoffset],bx
    50                              <1> 
    51 000000B1 B90E00              <1> 	mov cx, RootDirSectors
    52 000000B4 B81300              <1> 	mov ax, 19		; root dir starts at sector 19
    53                              <1> .readsector:
    54                              <1> 	readSector ax,buffer
    54 000000B7 60                  <2>  pusha
    54                              <2> 
    54 000000B8 89C0                <2>  mov ax, %1
    54 000000BA E8EC00              <2>  call csh
    54                              <2> 
    54 000000BD B402                <2>  mov ah, 02
    54 000000BF B001                <2>  mov al, 01
    54 000000C1 BB[0002]            <2>  mov bx, %2
    54 000000C4 CD13                <2>  int 0x13
    54                              <2> 
    54 000000C6 61                  <2>  popa
    55                              <1> 
    56 000000C7 51                  <1> 	push cx
    57 000000C8 31DB                <1> 	xor bx, bx
    58                              <1> .searchRootEntry:
    59 000000CA B90B00              <1> 	mov cx, 11
    60 000000CD 8DB7[0002]          <1> 	lea si, [buffer + bx]
    61 000000D1 BF[9601]            <1> 	mov di, bootfilename
    62 000000D4 F3A6                <1> 	repe cmpsb
    63 000000D6 7410                <1> 	je .filefound
    64                              <1> 	
    65                              <1> 	; not a match, we go to next entry
    66                              <1> 	;add bx, 64
    67 000000D8 83C320              <1> 	add bx, 32		; Goto the next entry.
    68 000000DB 81FB0002            <1> 	cmp bx, 512		; TODO: Is this really 512??
    69 000000DF 75E9                <1> 	jnz .searchRootEntry
    70                              <1> 
    71                              <1> .filenotfound:
    72 000000E1 59                  <1> 	pop cx
    73 000000E2 40                  <1> 	inc ax	; next sector
    74 000000E3 E2D2                <1> 	loop .readsector
    75 000000E5 E9A000              <1> 	jmp .failed
    76                              <1> 
    77                              <1> .filefound:
    78 000000E8 59                  <1> 	pop cx
    79                              <1> 	; read the file start sector
    80 000000E9 8B87[1A02]          <1> 	mov ax, word [buffer + bx + 0x1A]
    81 000000ED A3[A101]            <1> 	mov [filesector], ax
    82                              <1> 
    83                              <1> 	; read file size a 32 bit number 
    84                              <1> 	; Endianess is preserved - Bytes are written to 'fileremsize' in the
    85                              <1> 	; same order as they appear in the disk.
    86 000000F0 8B87[1C02]          <1> 	mov ax, word [buffer + bx + 0x1C]	; first 16 bits of file size
    87 000000F4 A3[A301]            <1> 	mov [fileremsize], ax
    88                              <1> 	
    89                              <1> 	; Saves the file size. This value will be returned if success.
    90 000000F7 A3[9401]            <1> 	mov [.ret], ax				
    91                              <1> 
    92                              <1> 	; NOTE: We are only reading 16 bits of size, as we cannot load a file 
    93                              <1> 	; that is more than 64k in size anyways. This saves a little bit of 
    94                              <1> 	; memory.
    95                              <1> 
    96                              <1> 	; mov ax, word [buffer + bx + 0x1E]	; second 16 bits of file size
    97                              <1> 	; mov [fileremsize+2], ax
    98                              <1> .repeat:
    99                              <1> 	; setup the counter register
   100 000000FA 833E[A301]00        <1> 	cmp [fileremsize], word 0
   101 000000FF 0F848300            <1> 	je .readFileEnd
   102                              <1> 
   103                              <1> 	; read 512 bytes (one sector) if the file remaining size is > 512.
   104 00000103 B90002              <1> 	mov cx, 512
   105                              <1> 
   106                              <1> 	; check to see if the remaining bytes is > or < 512 (one sector size)
   107 00000106 813E[A301]0002      <1> 	cmp [fileremsize],word 512
   108 0000010C 7704                <1> 	ja .readDataSector
   109                              <1> 
   110                              <1> 	; read all the remaining bytes as it is < 512 (one sector size)
   111                              <1> 	; file remaining size >= 512
   112 0000010E 8B0E[A301]          <1> 	mov cx, [fileremsize]
   113                              <1> .readDataSector:
   114 00000112 A1[A101]            <1> 	mov ax, [filesector]
   115 00000115 83C01F              <1> 	add ax, 31			; sector = sector -2 + 33
   116                              <1> 	readSector ax, buffer		; read sector to internal buffer
   116 00000118 60                  <2>  pusha
   116                              <2> 
   116 00000119 89C0                <2>  mov ax, %1
   116 0000011B E88B00              <2>  call csh
   116                              <2> 
   116 0000011E B402                <2>  mov ah, 02
   116 00000120 B001                <2>  mov al, 01
   116 00000122 BB[0002]            <2>  mov bx, %2
   116 00000125 CD13                <2>  int 0x13
   116                              <2> 
   116 00000127 61                  <2>  popa
   117                              <1> 
   118                              <1> 	; we copy as many bytes in the CX register from the internal buffer to
   119                              <1> 	; the output buffer
   120 00000128 06                  <1> 	push es				; preserve the ES value before change
   121 00000129 89CA                <1> 	mov dx, cx
   122 0000012B FC                  <1> 	cld				; set direcection flag = 0 (increment)
   123 0000012C BE[0002]            <1> 	mov si, buffer
   124 0000012F A1[A701]            <1> 	mov ax, [osegment]		; set up destination address
   125 00000132 8EC0                <1> 	mov es, ax
   126 00000134 8B3E[A501]          <1> 	mov di, [osegoffset]
   127 00000138 F3A4                <1> 	rep movsb
   128 0000013A 07                  <1> 	pop es				; restore the ES register
   129                              <1> 	; update remaining size variable.
   130 0000013B 2916[A301]          <1> 	sub word [fileremsize], dx	; remaining = remaining - bytes read
   131 0000013F 0116[A501]          <1> 	add word [osegoffset], dx	; osegoffset now points to the next
   132                              <1> 					; location to write to.
   133                              <1> .getNextSector:
   134                              <1> 	; now we get the next sector to read
   135 00000143 A1[A101]            <1> 	mov ax, [filesector]
   136 00000146 89C3                <1> 	mov bx, ax
   137 00000148 D1E8                <1> 	shr ax, 1
   138 0000014A 01D8                <1> 	add ax, bx			; [filesector] * 3/2
   139                              <1> 
   140                              <1> 	; AX now has the byte to be read from the FAT. For filesector 3, the
   141                              <1> 	; byte to be read from FAT is 3 * 3/2 = 4.5.
   142                              <1> 
   143                              <1> 	; we normalize the byte location in ax.
   144                              <1> 	; example: byte 513 in FAT table, is byte 1 of sector 2 of disk
   145 0000014C 31D2                <1> 	xor dx, dx
   146 0000014E F736[0B00]          <1> 	div word [BytesPerSector]
   147                              <1> 	
   148                              <1> 	; dx contains the normalized byte to be read from sector in ax
   149 00000152 0306[0E00]          <1> 	add ax, [ReservedSector]	; take into account reserved sector
   150                              <1> 
   151                              <1> 	; read the sector (containing FAT entry)
   152                              <1> 	readSector ax, buffer
   152 00000156 60                  <2>  pusha
   152                              <2> 
   152 00000157 89C0                <2>  mov ax, %1
   152 00000159 E84D00              <2>  call csh
   152                              <2> 
   152 0000015C B402                <2>  mov ah, 02
   152 0000015E B001                <2>  mov al, 01
   152 00000160 BB[0002]            <2>  mov bx, %2
   152 00000163 CD13                <2>  int 0x13
   152                              <2> 
   152 00000165 61                  <2>  popa
   153                              <1> 
   154                              <1> 	; read the word located at DX location
   155 00000166 89D3                <1> 	mov bx, dx			; DX cannot be used in effective
   156                              <1> 					; addtessing. So we use BX
   157 00000168 8B87[0002]          <1> 	mov ax, [buffer + bx]
   158                              <1> 
   159                              <1> 	; check if byte location is odd or even
   160 0000016C F706[A101]0100      <1> 	test word [filesector], 0x1
   161 00000172 7505                <1> 	jnz .odd
   162                              <1> 	
   163                              <1> 	; Byte location is even
   164 00000174 25FF0F              <1> 	and ax, 0xFFF
   165 00000177 EB03                <1> 	jmp .checkForLastSector
   166                              <1> .odd:
   167 00000179 C1E804              <1> 	shr ax, 4
   168                              <1> .checkForLastSector:
   169 0000017C 3DFF0F              <1> 	cmp ax, 0xFFF
   170 0000017F A3[A101]            <1> 	mov [filesector], ax		; save the sector to the 'filesector'
   171                              <1> 					; variable, so that we read that sector
   172                              <1> 					; after we jump
   173 00000182 0F8574FF            <1> 	jnz .repeat
   174                              <1> .readFileEnd:
   175                              <1> 	; file was found and read is complete.
   176                              <1> 	; Return value is the file size; this was already written when reading
   177                              <1> 	; the directory entry.
   178 00000186 EB06                <1> 	jmp .end
   179                              <1> .failed:
   180                              <1> 	; file was not found
   181                              <1> 	; Memory needs to written with 0 again.
   182                              <1> 	; This is becuause, it will hold the result from the previous read.
   183 00000188 C706[9401]0000      <1> 	mov [.ret], word 0
   184                              <1> .end:
   185 0000018E 61                  <1> 	popa
   186 0000018F A1[9401]            <1> 	mov ax, [.ret]		; AX must be set before we restore DS
   187 00000192 1F                  <1> 	pop ds
   188 00000193 CF                  <1> 	iret
   189                              <1> 
   190 00000194 0000                <1> .ret dw 0
   191 00000196 <res 0000000B>      <1> bootfilename:	resb	11
   191          ******************  <1>  warning: uninitialized space declared in .text section: zeroing [-w+other]
   192                              <1> RootDirSectors:	equ 	14
   193 000001A1 <res 00000002>      <1> filesector:	resw 	1
   193          ******************  <1>  warning: uninitialized space declared in .text section: zeroing [-w+other]
   194 000001A3 <res 00000002>      <1> fileremsize	resw 	1 ; even though the file size in FAT12 is 32 bits, we
   194          ******************  <1>  warning: uninitialized space declared in .text section: zeroing [-w+other]
   195                              <1> 			  ; cannot load a file that is more than 64K 
   196                              <1> 			  ; (fits in one segment) with our current logic in 
   197                              <1> 			  ; this function, so we are allocating only 16 bits.
   198 000001A5 <res 00000002>      <1> osegoffset	resw	1
   198          ******************  <1>  warning: uninitialized space declared in .text section: zeroing [-w+other]
   199 000001A7 <res 00000002>      <1> osegment	resw	1
   199          ******************  <1>  warning: uninitialized space declared in .text section: zeroing [-w+other]
   200                              <1> 
   201                              <1> %include "../common/readsector.s"
     1                              <2> 
     2                              <2> 
     3                              <2> ; Calculates the cylinder/track, circular sector and head for INT 0x14
     4                              <2> ; Input: 
     5                              <2> ;	AX - Sector number
     6                              <2> ; Output:
     7                              <2> ;	ch - Cylinder number
     8                              <2> ; 	dl - sector number (1 - 63)
     9                              <2> ;	dh - head number
    10                              <2> csh:
    11 000001A9 50                  <2> 	push ax
    12 000001AA 53                  <2> 	push bx
    13                              <2> 
    14                              <2> 	; disk sector (circular sector)
    15 000001AB 31D2                <2> 	xor dx, dx	; clear dx again, for second div
    16 000001AD F736[1800]          <2> 	div word [SectorsPerTrack]
    17 000001B1 83C201              <2> 	add dx, 1	; sector starts from 1 in INT 13
    18 000001B4 88D3                <2> 	mov bl, dl	; save the sector in BL
    19                              <2> 
    20                              <2> 	; track with more than one head
    21 000001B6 31D2                <2> 	xor dx, dx
    22 000001B8 F736[1A00]          <2> 	div word [HeadCount]
    23 000001BC 88C5                <2> 	mov ch, al	; cylinder
    24 000001BE 88D9                <2> 	mov cl, bl	; sector
    25 000001C0 88D6                <2> 	mov dh, dl	; head
    26 000001C2 B200                <2> 	mov dl, 0	; disk 0
    27                              <2> 	
    28 000001C4 5B                  <2> 	pop bx
    29 000001C5 58                  <2> 	pop ax
    30 000001C6 C3                  <2> 	ret
   162                                  %include "printstr.s"
     1                              <1> ; Prints a string zascii to screen
     2                              <1> ; Input: Pointer to string in DS:SI
     3                              <1> ; Output: None
     4                              <1> printstr:
     5 000001C7 50                  <1> 	push ax
     6                              <1> 
     7                              <1> 	; switch to 0x13 mode
     8                              <1> 	;mov ah, 0
     9                              <1> 	;mov al, 0x3	; text mode
    10                              <1> 	;int 0x10
    11                              <1> 
    12                              <1> .repeat:
    13 000001C8 AC                  <1> 	lodsb
    14 000001C9 B40E                <1> 	mov ah, 0xE
    15 000001CB CD10                <1> 	int 0x10
    16 000001CD 3C00                <1> 	cmp al, 0
    17 000001CF 75F7                <1> 	jne .repeat
    18                              <1> 
    19 000001D1 58                  <1> 	pop ax
    20 000001D2 CF                  <1> 	iret
   163                                  
   164 000001D3 464C00                  drivefailedstr:  db	 'FL',0
   165 000001D6 4C4400                  filenotfoundstr: db      'LD',0
   166 000001D9 4C4F41444552202020-     bootfile: db 'LOADER     '
   166 000001E2 2020               
   167                                  
   168                                  ; ******************************************************
   169                                  ; END OF BOOT LOADER
   170                                  ; ******************************************************
   171 000001E4 00<rept>                    times 510 - ($-$$) db 0
   172 000001FE 55AA                    		dw 	0xAA55
   173                                  
   174                                  ; ******************************************************
   175                                  ; FILE IO BUFFER
   176                                  ; ******************************************************
   177                                  buffer:
